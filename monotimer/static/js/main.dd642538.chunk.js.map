{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","tick","now","Date","h","getHours","m","getMinutes","s","getSeconds","ms","getMilliseconds","dayMoney","state","balance","monthPercent","moneyPerMSecond","msecondsForCop","daylyMSecondsIsGone","currentDayPrice","progressOfCop","Math","ceil","setState","percent","parseInt","toFixed","moneyProgres","onChangeBalance","target","value","chartRef","React","createRef","setInterval","this","className","src","logo","alt","type","onChange","maxValue","text","strokeWidth","trailWidth","strokeColor","trailColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6RAoFeA,G,wBA3Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,KAAO,WACL,IAAMC,EAAM,IAAIC,KACVC,EAAIF,EAAIG,WACRC,EAAIJ,EAAIK,aACRC,EAAIN,EAAIO,aACRC,EAAKR,EAAIS,kBACTC,EAAW,EAAKC,MAAMC,QAAU,EAAKC,aAAe,GAEpDC,EAAkBJ,EAAW,GAAK,GAAK,GAAK,IAC5CK,EAAiB,EAAID,EACrBE,EAAmD,KAAV,IAAX,GAAJd,EAAUE,GAAUE,GAAYE,EAC1DS,EAAkBD,EAAsBF,EAGxCI,GAAiBH,GAFLI,KAAKC,KAAKH,GAAmBH,EACdE,IACqBD,EAGtD,EAAKM,SAAS,CACZN,iBACAG,gBACAI,QAASC,SAAkC,IAAzBL,EAAcM,QAAQ,IACxCP,iBAAkBA,EAAgB,KAAKO,QAAQ,GAC/Cd,UAAWA,EAAS,KAAKc,QAAQ,GACjCC,aAAoD,KAArCR,EAAgBP,GAAUc,QAAQ,MAxClC,EA4CnBE,gBAAkB,YAAe,IAAbC,EAAY,EAAZA,OAClB,EAAKN,SAAS,CACZT,QAAsB,IAAbe,EAAOC,SA3ClB,EAAKC,SAAWC,IAAMC,YACtB,EAAKlB,aAAe,IAAK,GAEzB,EAAKF,MAAQ,CACXC,QAAS,OACTgB,MAAO,GARQ,E,iFAajBI,YAAYC,KAAKlC,KAAM,O,+BAsCvB,OAAKkC,KAAKtB,MAAMO,cAGd,yBAAKgB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,sMACA,yBAAKH,UAAU,OACb,2BAAOI,KAAM,OAAQV,MAAOL,SAASU,KAAKtB,MAAMC,QAAQ,KAAM2B,SAAUN,KAAKP,kBAD/E,uBAGA,0QAAiD,6BAAjD,+GAEA,kBAAC,IAAD,CAAqBE,MAAOK,KAAKtB,MAAMO,cAAesB,SAAU,EAAGC,KAAMR,KAAKtB,MAAMW,SAAX,UAAyBW,KAAKtB,MAAMW,QAApC,OACzE,wIAAyBW,KAAKtB,MAAMD,SAApC,uBACA,yBAAKwB,UAAW,SACd,kBAAC,IAAD,CAAMZ,QAASW,KAAKtB,MAAMc,aAAciB,YAAY,IAAIC,WAAW,IAAIC,YAAY,UAAUC,WAAW,YACxG,yBAAKX,UAAW,SAAhB,IAA2BD,KAAKtB,MAAMM,gBAAgB,MAAMgB,KAAKtB,MAAMD,SAAvE,OAjBgC,yBAAKwB,UAAU,Y,GApDvCY,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.dd642538.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport { Line } from 'rc-progress';\nimport logo from './logo.svg';\n\nimport './App.css';\nimport 'react-circular-progressbar/dist/styles.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.chartRef = React.createRef();\n    this.monthPercent = 0.07/12;\n\n    this.state = {\n      balance: 4721000,\n      value: 1,\n    }\n  }\n\n  componentDidMount() {\n    setInterval(this.tick, 100);\n  }\n\n\n  tick = () => {\n    const now = new Date();\n    const h = now.getHours();\n    const m = now.getMinutes();\n    const s = now.getSeconds();\n    const ms = now.getMilliseconds();\n    const dayMoney = this.state.balance * this.monthPercent / 31;\n    \n    const moneyPerMSecond = dayMoney / 24 / 60 / 60 / 1000;\n    const msecondsForCop = 1 / moneyPerMSecond;\n    const daylyMSecondsIsGone = ( ((h * 60) + m) * 60 + s) * 1000 + ms;\n    const currentDayPrice = daylyMSecondsIsGone * moneyPerMSecond;\n    const nextCopAt = Math.ceil(currentDayPrice) / moneyPerMSecond;\n    const nextCopAfter = nextCopAt - daylyMSecondsIsGone;\n    const progressOfCop = (msecondsForCop - nextCopAfter)/msecondsForCop;\n\n    \n    this.setState({\n      msecondsForCop,\n      progressOfCop,\n      percent: parseInt(progressOfCop.toFixed(2)*100),\n      currentDayPrice: (currentDayPrice/100).toFixed(2),\n      dayMoney: (dayMoney/100).toFixed(2),\n      moneyProgres: (currentDayPrice/dayMoney).toFixed(2)*100,\n    });\n  };\n\n  onChangeBalance = ({target}) => {\n    this.setState({\n      balance: target.value*100,\n    })\n  };\n\n  render() {\n    if (!this.state.progressOfCop) return <div className=\"App\"></div>;\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <p>Сколько на твоей карте Монобанк?</p>\n        <div className=\"row\">\n          <input type={'text'} value={parseInt(this.state.balance/100)} onChange={this.onChangeBalance} /> грн\n        </div>\n        <p>Ты смотришь, а на твой счет начисляются деньги<br />\n          Каждый круг +1 копейка</p>\n        <CircularProgressbar value={this.state.progressOfCop} maxValue={1} text={this.state.percent && `${this.state.percent}%`} />\n        <p>В конце дня получишь {this.state.dayMoney} грн</p>\n        <div className={'money'}>\n          <Line percent={this.state.moneyProgres} strokeWidth=\"4\" trailWidth=\"4\" strokeColor=\"#D3D3D3\" trailColor=\"#a0a0a0\" />\n          <div className={'label'}> {this.state.currentDayPrice+' / '+this.state.dayMoney} </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.043a9598.svg\";"],"sourceRoot":""}